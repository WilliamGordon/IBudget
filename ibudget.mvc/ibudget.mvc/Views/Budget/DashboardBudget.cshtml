@model ibudget.mvc.Models.ViewModel.DashboardBudgetComplexeModel
@inject IJsonHelper Json;
@{
    ViewData["Title"] = "Details";
}
<script src="https://cdn.jsdelivr.net/npm/autonumeric@4.1.0"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<style>
    @@media only screen and (min-width : 1200px) {
        .container {
            max-width: 1500px;
        }
    }

    #chart_wrap_category {
        border: 1px solid gray;
        position: relative;
        padding-bottom: 100%;
        height: 0;
        overflow: hidden;
    }

    #chart_category {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    #chart_wrap_expense {
        border: 1px solid gray;
        position: relative;
        padding-bottom: 100%;
        height: 0;
        overflow: hidden;
    }

    #chart_expense {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
</style>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">@Model.Budget.Name</h5>
        <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
        <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
    </div>
</div>
<div class="card-deck mt-3">
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Income/Expense chart</h5>
            <div id="chart_wrap_expense"><div id="chart_expense"></div></div>
        </div>
        <div class="card-footer">
            <small class="text-muted">Last updated 3 mins ago</small>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Spending by category: <span id="totalCategorySpending"></span></h5>
            <div id="chart_wrap_category"><div id="chart_category"></div></div>
        </div>
        <div class="card-footer">
            <small class="text-muted">Last updated 3 mins ago</small>
        </div>
    </div>
</div>
<div class="card-deck mt-3">
    <div class="card">
        <div class="card-body">
            <div class="input-group mb-4">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="inputGroupSelect01">Transactions</label>
                </div>
                <select class="custom-select" id="month" onchange="window.location.replace('./@Model.Budget.Id?month=' + $('#month').val() + '&year=' + $('#year').val());">
                    <option selected></option>
                    <option value="1">January</option>
                    <option value="2">February</option>
                    <option value="3">March</option>
                    <option value="4">April</option>
                    <option value="5">Mai</option>
                    <option value="6">June</option>
                    <option value="7">July</option>
                    <option value="8">Augustus</option>
                    <option value="9">September</option>
                    <option value="10">October</option>
                    <option value="11">November</option>
                    <option value="12">December</option>
                </select>
                <select class="custom-select" id="year" onchange="window.location.replace('./@Model.Budget.Id?month=' + $('#month').val() + '&year=' + $('#year').val());">
                    <option selected></option>
                    <option value="2015">2015</option>
                    <option value="2016">2016</option>
                    <option value="2017">2017</option>
                    <option value="2018">2018</option>
                    <option value="2019">2019</option>
                    <option value="2020">2020</option>
                    <option value="2021">2021</option>
                    <option value="2022">2022</option>
                    <option value="2023">2023</option>
                    <option value="2024">2024</option>
                    <option value="2025">2025</option>
                </select>
            </div>
            <div class="row justify-content-center">
                <div class="col-auto">
                    <table class="table table-sm table-hover">
                        <thead>
                            <tr>
                                <th>Amount</th>
                                <th>Date</th>
                                <th>Category</th>
                                <th>Description</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.Transaction != null)
                            {
                                @foreach (var item in Model.Transactions)
                                {
                                    <tr>
                                        <td style="cursor: pointer;" onclick="$('#TransactionCategoryForDetailsModal').modal('show');setupTransactionForDetailsModal('@item.Id');">@item.Amount <span>€</span></td>
                                        <td style="cursor: pointer;" onclick="$('#TransactionCategoryForDetailsModal').modal('show');setupTransactionForDetailsModal('@item.Id');">@item.Date.ToShortDateString()</td>
                                        @{
                                            var category = Model.Categories.SingleOrDefault(c => c.Id == item.CategoryId);
                                            var description = item.Description;
                                            if (description.Length > 100) {
                                                description = description.Substring(0, Math.Min(description.Length, 100));
                                            }
                                            if (category != null)
                                            {
                                                <td style="cursor: pointer;" onclick="$('#TransactionCategoryForDetailsModal').modal('show');setupTransactionForDetailsModal('@item.Id');">
                                                    <p>@category.Name</p>
                                                </td>
                                                <td style="width:880px; cursor: pointer;" onclick="$('#TransactionCategoryForDetailsModal').modal('show');setupTransactionForDetailsModal('@item.Id');">
                                                    @description
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#TransactionCategoryForEditModal" onclick="$('#TransactionCategoryForEdit_TransactionCategoryForEdit_Id').val('@item.Id'); $('#TransactionCategoryForEdit_TransactionCategoryForEdit_CategoryId').val('@item.CategoryId');">
                                                        Edit Category
                                                    </button>
                                                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#TransactionForEditModal" onclick="setupTransactionForEditModal('@item.Id');">
                                                        Edit
                                                    </button>
                                                    <button type="button" class="btn btn-danger" onclick="window.location.replace('/Budget/DeleteTransaction/@item.Id?budgetid=@item.BudgetId&month=' + $('#month').val() + '&year=' + $('#year').val());">X</button>
                                                </td>
                                            }
                                            else
                                            {
                                                <td style="cursor: pointer;" onclick="$('#TransactionCategoryForDetailsModal').modal('show');setupTransactionForDetailsModal('@item.Id');">
                                                    <p>None</p>
                                                </td>
                                                <td style="width:880px; cursor: pointer;" onclick="$('#TransactionCategoryForDetailsModal').modal('show');setupTransactionForDetailsModal('@item.Id');">
                                                    @description
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#TransactionCategoryForEditModal" onclick="$('#TransactionCategoryForEdit_TransactionCategoryForEdit_Id').val('@item.Id')">
                                                        Add Category
                                                    </button>
                                                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#TransactionForEditModal" onclick="setupTransactionForEditModal('@item.Id');">
                                                        Edit
                                                    </button>
                                                    <button type="button" class="btn btn-danger" onclick="window.location.replace('/Budget/DeleteTransaction/@item.Id?budgetid=@item.BudgetId&month=' + $('#month').val() + '&year=' + $('#year').val());">X</button>
                                                </td>
                                            }
                                        }
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <small class="text-muted">
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#TransactionForCreateModal">
                    New transaction
                </button>
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#CateogryForCreateModal">
                    New category
                </button>
            </small>
        </div>
    </div>
</div>

<div class="modal fade" id="TransactionForCreateModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add a new transaction</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form asp-action="CreateTransaction" id="TransactionForCreateForm">
                <div class="modal-body">
                    <div class="text-danger">
                        <p>
                            <ul id="errorListTransactionForCreateModal"></ul>
                            <script>
                                var obj = JSON.parse(@Json.Serialize(ViewBag.ErrorNotificationTransactionForCreateModal));
                                var ul = document.getElementById("errorListTransactionForCreateModal");
                                if (obj) {
                                    for (const key in obj.errors) {
                                        var li = document.createElement("li");
                                        li.appendChild(document.createTextNode(`${obj.errors[key]}`));
                                        ul.appendChild(li);
                                    }
                                }

                            </script>
                        </p>
                    </div>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="@Model.Transaction.Transaction.Amount" class="control-label"></label>
                        <input asp-for="@Model.Transaction.Transaction.Amount" class="form-control" />
                        <input asp-for="@Model.Transaction.Transaction.BudgetId" type="hidden" class="form-control" />
                        <span asp-validation-for="@Model.Transaction.Transaction.Amount" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.Transaction.Transaction.Description" class="control-label"></label>
                        <input asp-for="@Model.Transaction.Transaction.Description" class="form-control" />
                        <span asp-validation-for="@Model.Transaction.Transaction.Description" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.Transaction.Transaction.CategoryId" class="control-label"></label>
                        <select asp-for="@Model.Transaction.Transaction.CategoryId" asp-items="@Model.Transaction.Transaction.Categories" class="browser-default custom-select">
                            <option value=""></option>
                        </select>
                        <span asp-validation-for="@Model.Transaction.Transaction.CategoryId" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.Transaction.Transaction.Date" class="control-label"></label>
                        <input asp-for="@Model.Transaction.Transaction.Date" asp-format="{0:dd/MM/yyyy}" class="form-control" type='text' />
                        <span asp-validation-for="@Model.Transaction.Transaction.Date" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.Transaction.Transaction.Transmitter" class="control-label"></label>
                        <input asp-for="@Model.Transaction.Transaction.Transmitter" class="form-control" />
                        <span asp-validation-for="@Model.Transaction.Transaction.Transmitter" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.Transaction.Transaction.Receiver" class="control-label"></label>
                        <input asp-for="@Model.Transaction.Transaction.Receiver" class="form-control" />
                        <span asp-validation-for="@Model.Transaction.Transaction.Receiver" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.Transaction.Transaction.Message" class="control-label"></label>
                        <input asp-for="@Model.Transaction.Transaction.Message" class="form-control" />
                        <span asp-validation-for="@Model.Transaction.Transaction.Message" class="text-danger"></span>
                    </div>
                    <div>
                        <input asp-for="@Model.Transaction.Month" type="hidden" />
                        <input asp-for="@Model.Transaction.Year" type="hidden" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="TransactionForEditModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit transaction</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form asp-action="EditTransaction" id="TransactionForEditForm">
                <div class="modal-body">
                    <div class="text-danger">
                        <p>
                            <ul id="errorListTransactionForEditModal"></ul>
                            <script>
                                var obj = JSON.parse(@Json.Serialize(ViewBag.ErrorNotificationTransactionForEditModal));
                                var ul = document.getElementById("errorListTransactionForEditModal");
                                if (obj) {
                                    for (const key in obj.errors) {
                                        var li = document.createElement("li");
                                        li.appendChild(document.createTextNode(`${obj.errors[key]}`));
                                        ul.appendChild(li);
                                    }
                                }

                            </script>
                        </p>
                    </div>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="@Model.TransactionForEdit.TransactionForEdit.Amount" class="control-label"></label>
                        <input asp-for="@Model.TransactionForEdit.TransactionForEdit.Amount" class="form-control" />
                        <input asp-for="@Model.TransactionForEdit.TransactionForEdit.Id" type="hidden" class="form-control" />
                        <input asp-for="@Model.TransactionForEdit.TransactionForEdit.BudgetId" type="hidden" class="form-control" />
                        <span asp-validation-for="@Model.TransactionForEdit.TransactionForEdit.Amount" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.TransactionForEdit.TransactionForEdit.Description" class="control-label"></label>
                        <textarea asp-for="@Model.TransactionForEdit.TransactionForEdit.Description" class="form-control" rows="5" cols="40"></textarea>
                        <span asp-validation-for="@Model.TransactionForEdit.TransactionForEdit.Description" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.TransactionForEdit.TransactionForEdit.CategoryId" class="control-label"></label>
                        <select asp-for="@Model.TransactionForEdit.TransactionForEdit.CategoryId" asp-items="@Model.TransactionForEdit.TransactionForEdit.Categories" class="browser-default custom-select">
                            <option value=""></option>
                        </select>
                        <span asp-validation-for="@Model.TransactionForEdit.TransactionForEdit.CategoryId" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.TransactionForEdit.TransactionForEdit.Date" class="control-label"></label>
                        <input asp-for="@Model.TransactionForEdit.TransactionForEdit.Date" asp-format="{0:dd/MM/yyyy}" class="form-control" type='text' />
                        <span asp-validation-for="@Model.TransactionForEdit.TransactionForEdit.Date" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.TransactionForEdit.TransactionForEdit.Transmitter" class="control-label"></label>
                        <input asp-for="@Model.TransactionForEdit.TransactionForEdit.Transmitter" class="form-control" />
                        <span asp-validation-for="@Model.TransactionForEdit.TransactionForEdit.Transmitter" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.TransactionForEdit.TransactionForEdit.Receiver" class="control-label"></label>
                        <input asp-for="@Model.TransactionForEdit.TransactionForEdit.Receiver" class="form-control" />
                        <span asp-validation-for="@Model.TransactionForEdit.TransactionForEdit.Receiver" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="@Model.TransactionForEdit.TransactionForEdit.Message" class="control-label"></label>
                        <input asp-for="@Model.TransactionForEdit.TransactionForEdit.Message" class="form-control" />
                        <span asp-validation-for="@Model.TransactionForEdit.TransactionForEdit.Message" class="text-danger"></span>
                    </div>
                    <div>
                        <input asp-for="@Model.TransactionForEdit.Month" type="hidden" />
                        <input asp-for="@Model.TransactionForEdit.Year" type="hidden" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <input type="submit" value="Edit" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade bd-example-modal-lg" id="TransactionCategoryForDetailsModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Transaction details : <span id="TransactionIdDetails"></span></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h5>Description</h5>
                <p id="TransactionDescriptionDetails"></p>
                <hr>
                <h5>Category</h5>
                <p id="TransactionCateogryDetails"></p>
                <hr>
                <h5>Date</h5>
                <p id="TransactionDateDetails"></p>
                <hr>
                <h5>Transmitter</h5>
                <p id="TransactionTransmitterDetails"></p>
                <hr>
                <h5>Reciever</h5>
                <p id="TransactionRecieverDetails"></p>
                <hr>
                <h5>Message</h5>
                <p id="TransactionMessageDetails"></p>
                <hr>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="TransactionCategoryForEditModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Adding a category for the transaction</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form asp-action="EditTransactionCategory">
                <div class="modal-body">
                    <div class="text-danger">
                        <p>
                            <ul id="errorListCategoryForCreateModal"></ul>
                            <script>
                                var obj = JSON.parse(@Json.Serialize(ViewBag.ErrorNotificationCategoryForCreateModal));
                                var ul = document.getElementById("errorListCategoryForCreateModal");
                                if (obj) {
                                    for (const key in obj.errors) {
                                        var li = document.createElement("li");
                                        li.appendChild(document.createTextNode(`${obj.errors[key]}`));
                                        ul.appendChild(li);
                                    }
                                }
                            </script>
                        </p>
                    </div>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="@Model.TransactionCategoryForEdit.TransactionCategoryForEdit.CategoryId" class="control-label"></label>
                        <select asp-for="@Model.TransactionCategoryForEdit.TransactionCategoryForEdit.CategoryId" asp-items="@Model.Transaction.Transaction.Categories" class="browser-default custom-select"></select>
                        <input asp-for="@Model.TransactionCategoryForEdit.TransactionCategoryForEdit.Id" type="hidden" class="form-control" />
                        <input asp-for="@Model.TransactionCategoryForEdit.TransactionCategoryForEdit.BudgetId" type="hidden" class="form-control" />
                        <span asp-validation-for="@Model.TransactionCategoryForEdit.TransactionCategoryForEdit.CategoryId" class="text-danger"></span>
                    </div>
                    <div>
                        <input asp-for="@Model.TransactionCategoryForEdit.Month" type="hidden" />
                        <input asp-for="@Model.TransactionCategoryForEdit.Year" type="hidden" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <input type="submit" value="Add" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>


<div class="modal fade" id="CateogryForCreateModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Adding a new Category</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form asp-action="CreateCategory">
                <div class="modal-body">
                    <div class="text-danger">
                        <p>
                            <ul id="errorListTransactionCategoryForEditModal"></ul>
                            <script>
                                var obj = JSON.parse(@Json.Serialize(ViewBag.ErrorNotificationTransactionCategoryForEditModal));
                                var ul = document.getElementById("errorListTransactionCategoryForEditModal");
                                if (obj) {
                                    for (const key in obj.errors) {
                                        var li = document.createElement("li");
                                        li.appendChild(document.createTextNode(`${obj.errors[key]}`));
                                        ul.appendChild(li);
                                    }
                   Budget             }
                            </script>
                        </p>
                    </div>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="@Model.Category.Category.Name" class="control-label"></label>
                        <input asp-for="@Model.Category.Category.Name" class="form-control" />
                        <input asp-for="@Model.Category.Category.BudgetId" type="hidden" class="form-control" />
                        <span asp-validation-for="@Model.Category.Category.Name" class="text-danger"></span>
                    </div>
                    <div>
                        <input asp-for="@Model.Category.Month" type="hidden" />
                        <input asp-for="@Model.Category.Year" type="hidden" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewBag.ErrorNotificationTransactionForCreateModal))
{
    <script>
        $('#TransactionForCreateModal').modal('show');
    </script>
}

@if (!string.IsNullOrEmpty(ViewBag.ErrorNotificationTransactionForEditModal))
{
    <script>
        $('#TransactionForEditModal').modal('show');
    </script>
}

@if (!string.IsNullOrEmpty(ViewBag.ErrorNotificationTransactionCategoryForEditModal))
{
    <script>
        $('#CateogryForCreateModal').modal('show');
    </script>
}

@if (!string.IsNullOrEmpty(ViewBag.ErrorNotificationCategoryForCreateModal))
{
    <script>
        $('#TransactionCategoryForEditModal').modal('show');
    </script>
}

<script>

    // Get transactions and categories as objects
    var transactions = JSON.parse(JSON.stringify(@Json.Serialize(Model.Transactions)));
    var categories = JSON.parse(JSON.stringify(@Json.Serialize(Model.Categories)));

    // Construct data for google charts API Pie charts
    function getTransactionsCategoriesDataForCharts() {
        var transactionsCategoriesData = [["Categories", "Overall"]];
        // Loop over each categories
        categories.forEach(function(category) {
            // Create array for the category
            var categoryArray = [category.name, 0]
            // Loop over each transaction
            transactions.forEach(function(transaction) {
                // Check if transaction is part of the category
                if(transaction.categoryId === category.id) {
                    categoryArray[1] = categoryArray[1] + Math.abs(transaction.amount);
                }
            }); 
            transactionsCategoriesData.push(categoryArray);
        });
        return transactionsCategoriesData;
    }

    function getExpenseIncomeDataForCharts() {
        var expenseIncomeData = [['Element', 'Total', { role: 'style' }, { role: 'annotation' }]];
        var income = ['Income', 0, 'blue','Income'];
        var expense = ['Expense', 0, 'red','Expense'];
        // Loop over each transaction
        transactions.forEach(function(transaction) {
            // Check if transaction is an expense or an income
            if (transaction.amount < 0) {
                expense[1] = expense[1] + Math.abs(transaction.amount)
            } else {
                income[1] = income[1] + Math.abs(transaction.amount)
            }
        });
        expenseIncomeData.push(income);
        expenseIncomeData.push(expense);
        return expenseIncomeData;
    }

    // Google API configuration
    google.load("visualization", "1", {
        packages: ["corechart"]
    });

    google.setOnLoadCallback(initChartTransactionsCategories);
    google.setOnLoadCallback(initChartExpenseIncome);

    // if window is resied, redraw the charts
    $(window).on("throttledresize", function (event) {
        initChartTransactionsCategories();
        initChartExpenseIncome();
    });

    function initChartTransactionsCategories() {
        var options = {
            legend: 'none',
            width: '100%',
            height: '100%',
            pieSliceText: 'label',
            chartArea: {
                left: "3%",
                top: "3%",
                height: "94%",
                width: "94%"
            }
        };
        drawChartCategory(google.visualization.arrayToDataTable(getTransactionsCategoriesDataForCharts()), options)
        @* document.getElementById("totalCategorySpending").innerHTML = totalBySpending + " €" *@
    }
    function initChartExpenseIncome() {
        var options = {
            legend: 'none',
            width: '100%',
            height: '100%',
            title: 'Income/Expense for Month',
            bar: { groupWidth: "95%" },
            legend: { position: 'bottom' },
            chartArea: {
                left: "10%",
                top: "10%",
                height: "85%",
                width: "85%"
            }
        };
        drawChartExpense(google.visualization.arrayToDataTable(getExpenseIncomeDataForCharts()), options)
    }

    function drawChartCategory(data, options) {
        var chart = new google.visualization.PieChart(document.getElementById('chart_category'));
        chart.draw(data, options);
    }

    function drawChartExpense(data, options) {
        var chart = new google.visualization.ColumnChart(document.getElementById('chart_expense'));
        chart.draw(data, options);
    }

    // Declaring autonumeric variables
    var transactionAmountForCreate;
    var transactionAmountForEdit;

    $(document).ready(function () {
        // configuring JQuery/Bootstrap Datepicker
        $('#Transaction_Transaction_Date').datepicker({
            fautoclose: true,
            startDate: '-5y',
            endDate: '+2y',
            format: 'dd-mm-yyyy'
        });

        $('#TransactionForEdit_TransactionForEdit_Date').datepicker({
            fautoclose: true,
            startDate: '-5y',
            endDate: '+2y',
            format: 'dd-mm-yyyy'
        });
        
        // configuring JQuery autoNumeric for money fields
        transactionAmountForCreate = new AutoNumeric('#Transaction_Transaction_Amount', 'French'); // With the default options
        transactionAmountForEdit = new AutoNumeric('#TransactionForEdit_TransactionForEdit_Amount', 'French'); // With the default options

        // Format money fields on submit
        document.getElementById("TransactionForCreateForm").onsubmit = function onSubmit(form) {
            var money = document.getElementById("Transaction_Transaction_Amount").value;
            document.getElementById("Transaction_Transaction_Amount").value = formatMoney(money);
            // proceed with normal submit behaviour
            return true;
        }

        document.getElementById("TransactionForEditForm").onsubmit = function onSubmit(form) {
            var money = document.getElementById("TransactionForEdit_TransactionForEdit_Amount").value;
            document.getElementById("TransactionForEdit_TransactionForEdit_Amount").value = formatMoney(money);
            // proceed with normal submit behaviour
            return true;
        }

        // Set the Month and Year select fields by retreiving the value in the query URL
        const urlParams = new URLSearchParams(window.location.search);
        var month = urlParams.get('month')
        var year = urlParams.get('year')
        
        // if one of those value are empty or null set it to today date
        var today = new Date();
        if (month == "" || month == null || year == "" || year == null) {
            month = today.getMonth() + 1;
            year = today.getFullYear();
        }

        $('#month').val(month);
        $('#year').val(year);
    });

    function formatMoney(money) {
        var formattedMoney = money.replaceAll("€", "");
        var formattedMoney = formattedMoney.replaceAll(" ", "");
        var formattedMoney = formattedMoney.replaceAll(".", "");
        var formattedMoney = formattedMoney.replace(/\s/g, '');
        return formattedMoney;
    }

    function getTransaction(id) {
        var transaction = {};
        transactions.forEach(function(t) {
            // Check if transaction is part of the category
            if(t.id == id) {
                transaction = t;
            }
        }); 
        return transaction;
    }

    function getCategory(id) {
        var category = {};
        categories.forEach(function(c) {
            // Check if transaction is part of the category
            if(c.id == id) {
                category = c;
            }
        }); 
        return category;
    }

    function setupTransactionForEditModal(id) {
        var transaction = getTransaction(id);
        $('#TransactionForEdit_TransactionForEdit_Id').val(id);
        $('#TransactionForEdit_TransactionForEdit_BudgetId').val(transaction.budgetId);
        transactionAmountForEdit.set(transaction.amount)
        $('#TransactionForEdit_TransactionForEdit_Description').val(transaction.description);
        $('#TransactionForEdit_TransactionForEdit_CategoryId').val(transaction.categoryId);
        $('#TransactionForEdit_TransactionForEdit_Date').val(transaction.date);
        $('#TransactionForEdit_TransactionForEdit_Transmitter').val(transaction.transmitter);
        $('#TransactionForEdit_TransactionForEdit_Receiver').val(transaction.receiver);
        $('#TransactionForEdit_TransactionForEdit_Message').val(transaction.message);
    }

    function setupTransactionForDetailsModal(id) {
        var transaction = getTransaction(id);
        var category = getCategory(transaction.categoryId);
        $('#TransactionIdDetails').text(""); 
        $('#TransactionDescriptionDetails').text(""); 
        $('#TransactionCateogryDetails').text(""); 
        $('#TransactionDateDetails').text(""); 
        $('#TransactionTransmitterDetails').text(""); 
        $('#TransactionRecieverDetails').text(""); 
        $('#TransactionMessageDetails').text(""); 

        $('#TransactionIdDetails').text(transaction.id); 
        $('#TransactionDescriptionDetails').text(transaction.description);
        if (category.name == "" || category.name == undefined) {
            $('#TransactionCateogryDetails').text("none");
        } else {
            $('#TransactionCateogryDetails').text(category.name);
        }
        $('#TransactionDateDetails').text(transaction.date); 
        $('#TransactionTransmitterDetails').text(transaction.transmitter); 
        $('#TransactionRecieverDetails').text(transaction.receiver); 
        $('#TransactionMessageDetails').text(transaction.message); 
    }
    
</script>


