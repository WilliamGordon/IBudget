@model ibudget.mvc.Models.ViewModel.DashboardBudgetsComplexeModel
@inject IJsonHelper Json;
@{
    ViewData["Title"] = "My Budgets";
}
<style>
    .card:hover {
        transform: scale(1.01);
        box-shadow: 0 10px 20px rgba(0,0,0,.12), 0 4px 8px rgba(0,0,0,.06);
    }
</style>
@if (Model.Budgets != null)
{
    @foreach (var item in Model.Budgets)
    {
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">@item.Name</h5>
                <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
                <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
            </div>
            <a href="./DashboardBudget/@item.Id" class="stretched-link"></a>
        </div>
    }
}
<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
    Add new Budget
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Adding a new budget</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form asp-action="CreateBudget">
                <div class="modal-body">
                    <div class="text-danger">
                        <p>
                            <ul id="errorListModal"></ul>
                            <script>
                                var obj = JSON.parse(@Json.Serialize(ViewBag.ErrorNotificationModal));
                                var ul = document.getElementById("errorListModal");
                                    for (const key in obj.errors) {
                                        var li = document.createElement("li");
                                        li.appendChild(document.createTextNode(`${obj.errors[key]}`));
                                        ul.appendChild(li);
                                    }
                            </script>
                        </p>
                    </div>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="@Model.Budget.Name" class="control-label"></label>
                        <input asp-for="@Model.Budget.Name" class="form-control" />
                        <input asp-for="@Model.Budget.UserId" type="hidden" class="form-control" />
                        <span asp-validation-for="@Model.Budget.Name" class="text-danger"></span>
                    </div>
                    <div class="form-group">

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewBag.ErrorNotificationModal))
{
    <script>
        $('#exampleModal').modal('show');
    </script>
}

